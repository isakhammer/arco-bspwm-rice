# Adds `~/.local/bin` to $PATH
#export PATH="$PATH:$(du "$HOME/.local/bin" | cut -f2 | paste -sd ':')"

set r rate 300 50

# Default programs:
export EDITOR="nvim"
export TERMINAL="urxvt"
export BROWSER="chromium"
export READER="zathura"

# Shortcuts
source $HOME/.config/shortcutrc

# HDMI connection
alias hdmil="bash ~/.screenlayout/HDMI-LEFT.sh"
alias hdmis="bash ~/.screenlayout/SINGLE.sh"
alias screen_monitors="arandr"
# alias HDMI-SINGLE="xrandr --output eDP --primary --mode 1920x1080 --pos 0x0 --rotate normal --output HDMI-A-0 --off"

# Vim mode
set -o vi
export KEYTIMEOUT=1
setxkbmap -option caps:swapescape
#setxkbmap -option caps:none

# basic aliases
alias f="fg"
alias so="source ~/.bashrc"
alias c="clear && ls"
alias ls="ls --color=auto"
alias cf='cd ~/.config'

alias vim="nvim"
alias v="nvim"
alias se="nvim ~/.bashrc-personal"
alias r="ranger"

function shutdown_check(){
    status=$(cat "$battery"/status 2>/dev/null) || break
    # [ "$status" = "Discharging" ] && systemctl suspend
}


function battery_task_job(){
    while :
    do
    # Loop through all attached batteries.
        for battery in /sys/class/power_supply/BAT?
        do
        	# Get its remaining capacity and charge status.
        	capacity=$(cat "$battery"/capacity 2>/dev/null) || break
        	status=$(cat "$battery"/status 2>/dev/null) || break
        	# If it is discharging and 25% or less, we will add a ❗ as a warning.
        	[ "$capacity" -le 6 ] && [ "$status" == "Discharging" ] && zenity --info --timeout=5 --title="Low battery" --text "$(date +%Y%m%d-%H%M%S): Low battery"
                # \ notify-send -t 0 "Low battery."

        	[ "$capacity" -le 4 ] && [ "$status" = "Discharging" ] &&
                \ notify-send -t 0 "Critical battery level. Shutdown in 1min" &&
                \ sleep 60 && shutdown_check
        done
        sleep 60
    done
}

battery_task_job &

function zathura_job(){
    # Open zathura as a job
    zathura "$1" & disown
}
function zathura_close(){
    # Open zathura as a job and close terminal
    zathura_job $1
    exit
}
alias z="zathura_job"
alias zc="zathura_close"

#alias docker='sudo docker'
alias docker_socket='sudo chmod 777 /var/run/docker.sock'
alias docker_perm='sudo chown $USER:$USER'

# binding ctrl-f to fuzzy search
alias cz='cd "$(dirname "$(fzf)")" && ls'
# alias cza='zathura_close "$(find -iname "*.pdf" | fzf")"'
bind '"\C-f":"cz \r"'


# vi mode
alias probe="sudo -E hw-probe -all -upload"
alias R='R --quiet'

function ca(){
    if [ -n "$1" ]; then
    	    mkdir -p ~/.cache/ca
    	    touch ~/.cache/ca/ca
    	    echo "cd $PWD" > ~/.cache/ca/ca
    fi
    cat ~/.cache/ca/ca && bash ~/.cache/ca/ca
}

function p3(){
    if [ -n "$1" ]; then
    	    mkdir -p ~/.cache/p3
    	    touch ~/.cache/p3/pp
    	    echo "cd $PWD && python3 $1 || cd -" > ~/.cache/p3/pp
    fi
    cat ~/.cache/p3/pp && bash ~/.cache/p3/pp
}

# Short term alias for python commands
# alias p3="python3"

function ppa(){
	mkdir -p ~/.cache/ppa
	touch ~/.cache/ppa/pp
	echo "cd $PWD && python3 $1 || cd -" > ~/.cache/ppa/pp
}

function ppa1(){
	mkdir -p ~/.cache/ppa
	touch ~/.cache/ppa/pp1
	echo "cd $PWD && python3 $1 || cd -" > ~/.cache/ppa/pp1
}

alias p="p3"
alias pp="cat ~/.cache/ppa/pp && bash ~/.cache/ppa/pp "
alias pp1="cat ~/.cache/ppa/pp1 && bash ~/.cache/ppa/pp1"

alias tmpy="mkdir -p ~/.cache/tmpy; touch ~/.cache/tmpy/tmpy.py; vim ~/.cache/tmpy/tmpy.py"
alias pt="python3 ~/.cache/tmpy/tmpy.py"

# Brightness
function brightness_manual(){
	echo $1 | sudo tee /sys/class/backlight/amdgpu_bl0/brightness
}
alias bb="brightness_manual"
alias bb1="brightness_manual 250"
alias bb0="brightness_manual 0"

# backtrack
function backtrack(){
    mkdir -p ~/.cache/k
    touch ~/.cache/k/kk
    echo "cd $PWD" > ~/.cache/k/kk
}
cat ~/.cache/k/kk && . ~/.cache/k/kk
alias k="backtrack"

# Backtrack zathura
function backtrack_kz(){
    mkdir -p ~/.cache/kz
    touch ~/.cache/kz/kkz
    echo "cd $PWD && zathura $1 || cd -"+ > ~/.cache/kz/kkz
}
alias kz="backtrack_kz"
alias kZ=". ~/.cache/kz/kkz"

# Basic git aliases
function git_clone_recursive()  {
    arg=$1
    git clone $arg --recurse-submodules
}

function git_commit()  {
    array="${@}"
    git commit -m"$array"
}

function git_stash_pop()  {
    arg=$1
    git stash pop stash@{$arg}
}

function get_file_from_commit() {
    commit_id=$1
    file_path=$2
    git checkout $commit_id -- $file_path
}
function set_git_global_user() {
    email=$1
    git config --global user.email "$email"
}

alias g="git"

alias gl="git log"
alias gd="git diff"
alias gqp="git stash pop"
alias gq="git stash"
alias gs="git status"
alias gb="git branch"
alias gch="git checkout"
alias gchb="git checkout -b"
alias ga="git add"
alias gap="git add -p"
alias gc="git_commit" # custom function
alias gce="git commit -a --allow-empty-message -m ''"
alias gp="git push origin HEAD"
alias gpu="git pull"
alias sgg="set_git_global_user"


# Function used to evaluate PS1 in terminal
git_branch() {
    # -- Finds and outputs the current branch name by parsing the list of
    #    all branches
    # -- Current branch is identified by an asterisk at the beginning
    # -- If not in a Git repository, error message goes to /dev/null and
    #    no output is produced
    git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

git_status() {
    # Outputs a series of indicators based on the status of the
    # working directory:
    # + changes are staged and ready to commit
    # ! unstaged changes are present
    # ? untracked files are present
    # S changes have been stashed
    # P local commits need to be pushed to the remote
    local status="$(git status --porcelain 2>/dev/null)"
    local output=''
    [[ -n $(egrep '^[MADRC]' <<<"$status") ]] && output="$output+"
    [[ -n $(egrep '^.[MD]' <<<"$status") ]] && output="$output!"
    [[ -n $(egrep '^\?\?' <<<"$status") ]] && output="$output?"
    [[ -n $(git stash list) ]] && output="${output}S"
    [[ -n $(git log --branches --not --remotes) ]] && output="${output}P"
    [[ -n $output ]] && output="|$output"  # separate from branch name
    echo $output
}

git_color() {
    # Receives output of git_status as argument; produces appropriate color
    # code based on status of working directory:
    # - White if everything is clean
    # - Green if all changes are staged
    # - Red if there are uncommitted changes with nothing staged
    # - Yellow if there are both staged and unstaged changes
    local staged=$([[ $1 =~ \+ ]] && echo yes)
    local dirty=$([[ $1 =~ [!\?] ]] && echo yes)
    if [[ -n $staged ]] && [[ -n $dirty ]]; then
        echo -e '\033[1;33m'  # bold yellow
    elif [[ -n $staged ]]; then
        echo -e '\033[1;32m'  # bold green
    elif [[ -n $dirty ]]; then
        echo -e '\033[1;31m'  # bold red
    else
        echo -e '\033[1;37m'  # bold white
    fi
}

git_prompt() {
    # First, get the branch name...
    local branch=$(git_branch)
    # Empty output? Then we're not in a Git repository, so bypass the rest
    # of the function, producing no output
    if [[ -n $branch ]]; then
        local state=$(git_status)
        local color=$(git_color $state)
        # Now output the actual code to insert the branch and status
        echo -e "\x01$color\x02[$branch$state]\x01\033[00m\x02"  # last bit resets color
    fi
}

# Sample prompt declaration based off of the default Ubuntu 14.04.1 color
# prompt. Tweak as you see fit, or just stick "$(git_prompt)" into your
# favorite prompt.
PS1='$debian_chroot\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w$(git_prompt)\[\033[00m\]\$ '

# Shorten the dir names,
sps() {
    echo `dirname $PWD` | sed -r 's|/(.)[^/]*|/\1|g'
}
# PS1='$debian_chroot\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\] $(eval "sps")/\W $(git_prompt)\[\033[00m\]\$ '

# HDMI-LEFT.sh  HDMI-RIGHT.sh  single.sh
alias webcamera="guvcview"
alias webcamera1="mpv /dev/video0"
alias server="python -m http.server"

# alias public_ip="curl ifconfig.me"

