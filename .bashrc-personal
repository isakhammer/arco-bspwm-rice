# Adds `~/.local/bin` to $PATH
#export PATH="$PATH:$(du "$HOME/.local/bin" | cut -f2 | paste -sd ':')"

set r rate 300 50

# Default programs:
export EDITOR="nvim"
export TERMINAL="urxvt"
export BROWSER="chromium"
export READER="zathura"

# Vim mode
set -o vi
export KEYTIMEOUT=1
setxkbmap -option caps:swapescape

# basic aliases
alias so="source ~/.bashrc"
alias c="clear && ls"
alias ls="ls --color=auto"
alias cf='cd ~/.config'

alias vim="nvim"
alias v="vim"
alias se="vim ~/.bashrc-personal"
alias r="ranger"

function zathura_job(){
    zathura "$1" & disown
    # # hop zathura "$0" & disown
    # exit
}
function zathura_close(){
    zathura_job $1
    exit
}
alias z="zathura_job"
alias zc="zathura_close"

alias docker='sudo docker'
alias docker_socket='sudo chmod 777 /var/run/docker.sock'

# binding ctrl-f to fuzzy search
alias cz='cd "$(dirname "$(fzf)")" && ls'
bind '"\C-f":"cz \r"'

# vi mode
alias probe="sudo -E hw-probe -all -upload"
alias R='R --quiet'

# Short term alias for python commands
alias p3="python3"
function ppa(){
	mkdir -p ~/.cache/ppa
	touch ~/.cache/ppa/pp
	echo "cd $PWD && python3 $1 || cd -" > ~/.cache/ppa/pp
}

function ppa1(){
	mkdir -p ~/.cache/ppa
	touch ~/.cache/ppa/pp1
	echo "cd $PWD && python3 $1 || cd -" > ~/.cache/ppa/pp1
}

alias pp="cat ~/.cache/ppa/pp && bash ~/.cache/ppa/pp "
alias pp1="cat ~/.cache/ppa/pp1 && bash ~/.cache/ppa/pp1"

# Brightness
function brightness(){
	echo $1 | sudo tee /sys/class/backlight/amdgpu_bl0/brightness
}
alias bb="brightness"


alias g="git"
git config --global alias.ch checkout
git config --global alias.b branch
git config --global alias.c commit
git config --global alias.s status
git config --global alias.st stash
git config --global alias.a add



git_branch() {
    # -- Finds and outputs the current branch name by parsing the list of
    #    all branches
    # -- Current branch is identified by an asterisk at the beginning
    # -- If not in a Git repository, error message goes to /dev/null and
    #    no output is produced
    git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

git_status() {
    # Outputs a series of indicators based on the status of the
    # working directory:
    # + changes are staged and ready to commit
    # ! unstaged changes are present
    # ? untracked files are present
    # S changes have been stashed
    # P local commits need to be pushed to the remote
    local status="$(git status --porcelain 2>/dev/null)"
    local output=''
    [[ -n $(egrep '^[MADRC]' <<<"$status") ]] && output="$output+"
    [[ -n $(egrep '^.[MD]' <<<"$status") ]] && output="$output!"
    [[ -n $(egrep '^\?\?' <<<"$status") ]] && output="$output?"
    [[ -n $(git stash list) ]] && output="${output}S"
    [[ -n $(git log --branches --not --remotes) ]] && output="${output}P"
    [[ -n $output ]] && output="|$output"  # separate from branch name
    echo $output
}

git_color() {
    # Receives output of git_status as argument; produces appropriate color
    # code based on status of working directory:
    # - White if everything is clean
    # - Green if all changes are staged
    # - Red if there are uncommitted changes with nothing staged
    # - Yellow if there are both staged and unstaged changes
    local staged=$([[ $1 =~ \+ ]] && echo yes)
    local dirty=$([[ $1 =~ [!\?] ]] && echo yes)
    if [[ -n $staged ]] && [[ -n $dirty ]]; then
        echo -e '\033[1;33m'  # bold yellow
    elif [[ -n $staged ]]; then
        echo -e '\033[1;32m'  # bold green
    elif [[ -n $dirty ]]; then
        echo -e '\033[1;31m'  # bold red
    else
        echo -e '\033[1;37m'  # bold white
    fi
}

git_prompt() {
    # First, get the branch name...
    local branch=$(git_branch)
    # Empty output? Then we're not in a Git repository, so bypass the rest
    # of the function, producing no output
    if [[ -n $branch ]]; then
        local state=$(git_status)
        local color=$(git_color $state)
        # Now output the actual code to insert the branch and status
        echo -e "\x01$color\x02[$branch$state]\x01\033[00m\x02"  # last bit resets color
    fi
}

# Sample prompt declaration based off of the default Ubuntu 14.04.1 color
# prompt. Tweak as you see fit, or just stick "$(git_prompt)" into your
# favorite prompt.

PS1='$debian_chroot\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w$(git_prompt)\[\033[00m\]\$ '

# Shorten the dir names,
sps() {
    echo `dirname $PWD` | sed -r 's|/(.)[^/]*|/\1|g'
}
# PS1='$debian_chroot\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\] $(eval "sps")/\W $(git_prompt)\[\033[00m\]\$ '
